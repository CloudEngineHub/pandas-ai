name: CI

on:
  push:
    branches: [main]
  pull_request:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        python-version: ["3.10", "3.11"]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            (Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | python -
            echo "C:\\Users\\runneradmin\\AppData\\Roaming\\Python\\Scripts" >> $env:GITHUB_PATH
          else
            curl -sSL https://install.python-poetry.org | python3 -
            echo 'export PATH="$HOME/.local/bin:$PATH"' >> $GITHUB_ENV
          fi

      - name: Verify Poetry Installation
        run: poetry --version

      - name: Clear Poetry Cache
        run: poetry cache clear pypi --all

      - name: Install dependencies
        run: poetry install --all-extras --with dev --verbose

      - name: Install extension dependencies
        run: |
          find extensions/ -mindepth 1 -type d \( \
            -path "extensions/llms/*" -o \
            -path "extensions/connectors/*" -o \
            -path "extensions/ee/*/*" \) | while read -r dir; do
              if [ -f "$dir/pyproject.toml" ]; then
                echo "Installing dependencies for $dir"
                (
                  cd "$dir" || exit
                  poetry install --all-extras
                )
              fi
          done
        if: matrix.os != 'windows-latest'

      - name: Install extension dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Get-ChildItem -Path extensions/llms -Directory | ForEach-Object {
            $projFile = Join-Path $_.FullName "pyproject.toml"
            if (Test-Path $projFile) {
              Write-Host "Installing dependencies for $_"
              Push-Location $_.FullName
              poetry install --all-extras
              Pop-Location
            }
          }

          Get-ChildItem -Path extensions/connectors -Directory | ForEach-Object {
            $projFile = Join-Path $_.FullName "pyproject.toml"
            if (Test-Path $projFile) {
              Write-Host "Installing dependencies for $_"
              Push-Location $_.FullName
              poetry install --all-extras
              Pop-Location
            }
          }

          Get-ChildItem -Path extensions/ee -Recurse -Directory -Depth 2 | ForEach-Object {
            $projFile = Join-Path $_.FullName "pyproject.toml"
            if (Test-Path $projFile) {
              Write-Host "Installing dependencies for $_"
              Push-Location $_.FullName
              poetry install --all-extras
              Pop-Location
            }
          }

      - name: Run Linting
        run: make format_diff

      - name: Run Spellcheck
        run: make spell_check

      - name: Run Core Tests
        run: make test_core

      - name: Run Extension Tests
        run: make test_extensions
        if: matrix.os != 'windows-latest'

      - name: Run Extension Tests (Windows)
        run: |
          Get-ChildItem -Path extensions/llms -Directory | ForEach-Object {
            $testDir = Join-Path $_.FullName "tests"
            if (Test-Path $testDir) {
              Write-Host "Running tests for $_"
              Push-Location $_.FullName
              poetry run pytest tests/
              Pop-Location
            }
          }

          Get-ChildItem -Path extensions/connectors -Directory | ForEach-Object {
            $testDir = Join-Path $_.FullName "tests"
            if (Test-Path $testDir) {
              Write-Host "Running tests for $_"
              Push-Location $_.FullName
              poetry run pytest tests/
              Pop-Location
            }
          }

          Get-ChildItem -Path extensions/ee -Recurse -Directory -Depth 2 | ForEach-Object {
            $testDir = Join-Path $_.FullName "tests"
            if (Test-Path $testDir) {
              Write-Host "Running tests for $_"
              Push-Location $_.FullName
              poetry run pytest tests/
              Pop-Location
            }
          }

      - name: Run Code Coverage
        continue-on-error: true
        run: |
          poetry run coverage run --source=pandasai,extensions -m pytest tests extensions/*/tests extensions/ee/*/tests --ignore=tests/integration_tests
          poetry run coverage xml

      - name: Report Coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
