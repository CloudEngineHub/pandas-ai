name: ci-extensions

on:
  push:
    branches: [main]
  pull_request:

jobs:
  extensions-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        python-version: ["3.10", "3.11"]

    steps:
      - name: Clean up instance space
        if: matrix.os != 'windows-latest'
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          df -h

      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo 'export PATH="$HOME/.local/bin:$PATH"' >> $GITHUB_ENV

      - name: Install Poetry (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          (Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | python -
          echo "C:\\Users\\runneradmin\\AppData\\Roaming\\Python\\Scripts" >> $env:GITHUB_PATH

      - name: Verify Poetry Installation
        run: poetry --version

      - name: Clear Poetry Cache
        run: poetry cache clear pypi --all

      - name: Install dependencies and test extensions
        if: matrix.os != 'windows-latest'
        run: |
          for ext in extensions/*; do
            if [ -d "$ext" ] && [ -f "$ext/pyproject.toml" ]; then
              echo "Installing dependencies and running tests for $ext"
              (cd "$ext" && poetry install --all-extras --with test --verbose)
              (cd "$ext" && poetry run pytest tests/)
            fi
          done

      - name: Run extension tests (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Get-ChildItem -Path extensions/* -Directory | ForEach-Object {
            $testDir = Join-Path $_.FullName "tests"
            if (Test-Path $testDir) {
              Write-Host "Running tests for $($_.FullName)"
              Push-Location $_.FullName
              poetry install --all-extras --with test --verbose
              poetry run pytest tests/
              Pop-Location
            }
          }

      - name: Run code coverage for extensions
        continue-on-error: true
        run: |
          poetry run coverage run --source=extensions -m pytest tests extensions/*/tests
          poetry run coverage xml

      - name: Report coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
